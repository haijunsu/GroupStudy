Problem: Remove non-letter-no-digit from a text file and sort words and digits. Words and digits must follow original placeholder.
Example:
Input:
    apple orange banana
Output:
    apple banana orange

Input:
    1 10 3 8 5
Output:
    1 3 5 8 10

Input:
    car 10 truck 4 2 bus
Output:
    bus 2 car 4 10 truck

Input:
    20 @#$ cat bi?rd $12 do@g
Output:
    12 bird cat 20 dog








To solve the problem, the following steps will be needed.
1. Read content from a file and clean up text
2. Validate number and word
3. Split the content to number list and word list
4. Sort number list and word list
5. Merge number list and word list and write them into result file.
6. Make sure string and number remain their original position

The list only takes 10MB (100 * 100,000 / 1024 / 1024) memory. We can do it in memory without any exchange on disk storage.

To find all non-letter-non-digit characters, we can iterate the ASCII table and find all of them. Python already has a
method str.printable to give us all printable characters. We can use regular expression to get all non-letter-non-digit
characters instead of iterating the ASCII table.

To delete character from string, there are several ways to do it:
1. str.replace("<regex>", "")
2. re.sub('<regex>', '', <string>)
3. str.translate(table)
All those methods can do the job. If we only delete one character, the replace method is the fastest. If we need remove a lot of
characters, the translate method is the best choice. The regular expression mothed is slower that other two methods.

To sort content, we have to split original content to two list: words and digits. Because we need to put number and word back to
original placeholder, we need to remember the positions of numbers and words. We can either to use the original list or create
an additional boolean list to tract it. If we use the original list, we have to check the position again before we put digit or word
back (I used this method in unittest). The additional boolean list is faster than it.

The time complexity of sort method in python is nlog(n). see https://wiki.python.org/moin/TimeComplexity. It is also the best
choice for most use cases.
If time is really matter, we can implement timsort to improve the performance. see https://en.wikipedia.org/wiki/Timsort

To verify implementation, I wrote unittest and a tool to help to generate general test cases. I also considered the following edge cases:
1. Input is empty line
2. Input only includes legal integers
3. Input only includes legal words
4. Input includes legal integers and words
5. Input includes integers and non-letter-non-digit
6. Input includes words and non-letter-non-digit
7. Input includes legal integers, words and non-letter-non-digit
8. Input includes the longest words
9. Input includes the integers 999999 and -999999
10. Input includes longest words and total 100,000 words (Generated by the generator tool)

To verify cleaning up text function, I used another algorithm (str.replace) to verify the result.
To verify sorted function, I created some short cases and compare the output file and answer file. For generated cases, I compared them
in memory.

